{"version":3,"file":"SQLiteDatabase.mjs","sources":["../../../src/SQLiteAdapter/SQLiteDatabase.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport SQLite from 'react-native-sqlite-storage';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { DB_NAME } from '../common/constants';\nconst logger = new ConsoleLogger('SQLiteDatabase');\nSQLite.enablePromise(true);\nif (ConsoleLogger.LOG_LEVEL === 'DEBUG') {\n    SQLite.DEBUG(true);\n}\n/*\n\nNote:\nI purposely avoided using arrow functions () => {} in this class,\nBecause I ran into issues with them in some of the SQLite method callbacks\n\nAlso, even though the SQLite library is promisified, certain operations\nonly work correctly with callbacks. Specifically, any time you need to\nget the result of an `executeSql` command inside of a transaction\n(see the batchQuery method below)\n\n*/\nclass SQLiteDatabase {\n    async init() {\n        // only open database once.\n        if (!this.db) {\n            this.db = await SQLite.openDatabase({\n                name: DB_NAME,\n                location: 'default',\n            });\n        }\n    }\n    async createSchema(statements) {\n        await this.executeStatements(statements);\n    }\n    async clear() {\n        await this.closeDB();\n        logger.debug('Deleting database');\n        await SQLite.deleteDatabase({ name: DB_NAME, location: 'default' });\n        logger.debug('Database deleted');\n    }\n    async get(statement, params) {\n        const results = await this.getAll(statement, params);\n        return results[0];\n    }\n    async getAll(statement, params) {\n        const [resultSet] = await this.db.executeSql(statement, params);\n        const result = resultSet &&\n            resultSet.rows &&\n            resultSet.rows.length &&\n            resultSet.rows.raw &&\n            resultSet.rows.raw();\n        return result || [];\n    }\n    async save(statement, params) {\n        await this.db.executeSql(statement, params);\n    }\n    async batchQuery(queryParameterizedStatements) {\n        const results = [];\n        await this.db.readTransaction(tx => {\n            for (const [statement, params] of queryParameterizedStatements) {\n                tx.executeSql(statement, params, (_, res) => {\n                    results.push(res.rows.raw()[0]);\n                }, logger.warn);\n            }\n        });\n        return results;\n    }\n    async batchSave(saveParameterizedStatements, deleteParameterizedStatements) {\n        await this.db.transaction(tx => {\n            for (const [statement, params] of saveParameterizedStatements) {\n                tx.executeSql(statement, params);\n            }\n        });\n        if (deleteParameterizedStatements) {\n            await this.db.transaction(tx => {\n                for (const [statement, params] of deleteParameterizedStatements) {\n                    tx.executeSql(statement, params);\n                }\n            });\n        }\n    }\n    async selectAndDelete(queryParameterizedStatement, deleteParameterizedStatement) {\n        let results = [];\n        const [queryStatement, queryParams] = queryParameterizedStatement;\n        const [deleteStatement, deleteParams] = deleteParameterizedStatement;\n        await this.db.transaction(tx => {\n            tx.executeSql(queryStatement, queryParams, (_, res) => {\n                results = res.rows.raw();\n            }, logger.warn);\n            tx.executeSql(deleteStatement, deleteParams, () => {\n                // no-op\n            }, logger.warn);\n        });\n        return results;\n    }\n    async executeStatements(statements) {\n        await this.db.transaction(tx => {\n            for (const statement of statements) {\n                tx.executeSql(statement);\n            }\n        });\n    }\n    async closeDB() {\n        if (this.db) {\n            logger.debug('Closing Database');\n            await this.db.close();\n            logger.debug('Database closed');\n            this.db = undefined;\n        }\n    }\n}\nexport default SQLiteDatabase;\n"],"names":[],"mappings":"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"}