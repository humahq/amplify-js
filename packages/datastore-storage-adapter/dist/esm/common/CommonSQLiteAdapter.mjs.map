{"version":3,"file":"CommonSQLiteAdapter.mjs","sources":["../../../src/common/CommonSQLiteAdapter.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { ModelPredicateCreator, ModelSortPredicateCreator, OpType, QueryOne, isPredicateObj, utils, } from '@aws-amplify/datastore';\nimport { deleteByIdStatement, deleteByPredicateStatement, generateSchemaStatements, modelInsertStatement, modelUpdateStatement, queryAllStatement, queryByIdStatement, queryOneStatement, } from '../common/SQLiteUtils';\nconst { traverseModel, validatePredicate, isModelConstructor } = utils;\nconst logger = new ConsoleLogger('DataStore');\nexport class CommonSQLiteAdapter {\n    constructor(db) {\n        this.db = db;\n    }\n    async setUp(theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n        if (!this.initPromise) {\n            this.initPromise = new Promise((_resolve, _reject) => {\n                this.resolve = _resolve;\n                this.reject = _reject;\n            });\n        }\n        else {\n            await this.initPromise;\n            return;\n        }\n        this.schema = theSchema;\n        this.namespaceResolver = namespaceResolver;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.getModelConstructorByModelName = getModelConstructorByModelName;\n        try {\n            const usesCPKCodegen = Object.values(this.schema.namespaces.user.models).some(model => Object.values(model.fields).some(field => \n            // eslint-disable-next-line no-prototype-builtins\n            field.association?.hasOwnProperty('targetNames')));\n            if (usesCPKCodegen) {\n                logger.error('The SQLite adapter does not support schemas using custom primary key. Set `graphQLTransformer.respectPrimaryKeyAttributesOnConnectionField in `amplify/cli.json` to false to disable custom primary key. To regenerate your API, add or remove an empty newline to your GraphQL schema (to change the computed hash) then run `amplify push`.');\n            }\n            await this.db.init();\n            const statements = generateSchemaStatements(this.schema);\n            await this.db.createSchema(statements);\n            this.resolve();\n        }\n        catch (error) {\n            this.reject(error);\n        }\n    }\n    async clear() {\n        await this.db.clear();\n        this.initPromise = undefined;\n    }\n    async save(model, condition) {\n        const modelConstructor = Object.getPrototypeOf(model)\n            .constructor;\n        const { name: tableName } = modelConstructor;\n        const connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n        const connectionStoreNames = Object.values(connectedModels).map(({ modelName, item, instance }) => {\n            return { modelName, item, instance };\n        });\n        const [queryStatement, params] = queryByIdStatement(model.id, tableName);\n        const fromDB = await this.db.get(queryStatement, params);\n        if (condition && fromDB) {\n            const predicates = ModelPredicateCreator.getPredicates(condition);\n            const { predicates: predicateObjs, type } = predicates;\n            const isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n                const msg = 'Conditional update failed';\n                logger.error(msg, { model: fromDB, condition: predicateObjs });\n                throw new Error(msg);\n            }\n        }\n        const result = [];\n        const saveStatements = new Set();\n        for await (const resItem of connectionStoreNames) {\n            const { modelName, item, instance } = resItem;\n            const { id } = item;\n            const [queryStatementForRestItem, paramsForRestItem] = queryByIdStatement(id, modelName);\n            const fromDBForRestItem = await this.db.get(queryStatementForRestItem, paramsForRestItem);\n            const opType = fromDBForRestItem === undefined ? OpType.INSERT : OpType.UPDATE;\n            const saveStatement = fromDBForRestItem\n                ? modelUpdateStatement(instance, modelName)\n                : modelInsertStatement(instance, modelName);\n            if (id === model.id || opType === OpType.INSERT) {\n                saveStatements.add(saveStatement);\n                result.push([instance, opType]);\n            }\n        }\n        await this.db.batchSave(saveStatements);\n        return result;\n    }\n    async load(namespaceName, srcModelName, records) {\n        const namespace = this.schema.namespaces[namespaceName];\n        const relations = namespace.relationships[srcModelName].relationTypes;\n        const connectionTableNames = relations.map(({ modelName }) => modelName);\n        const modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n        if (connectionTableNames.length === 0) {\n            return records.map(record => this.modelInstanceCreator(modelConstructor, record));\n        }\n        // Remove related-model fields. They're all `null` in the database,\n        // and any that happen to be required will result in a false validation\n        // error when DataStore attempts to initialize with `null`.\n        // These fields aren't actually needed here. DataStore will use the FK's\n        // from the schema model.\n        return records.map(record => {\n            for (const r of relations) {\n                delete record[r.fieldName];\n            }\n            return this.modelInstanceCreator(modelConstructor, record);\n        });\n    }\n    async query(modelConstructor, predicate, pagination) {\n        const { name: tableName } = modelConstructor;\n        const namespaceName = this.namespaceResolver(modelConstructor);\n        const predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n        const sortPredicates = pagination &&\n            pagination.sort &&\n            ModelSortPredicateCreator.getPredicates(pagination.sort);\n        const limit = pagination && pagination.limit;\n        const page = limit && pagination.page;\n        const queryById = predicates && this.idFromPredicate(predicates);\n        const records = (await (async () => {\n            if (queryById) {\n                const record = await this.getById(tableName, queryById);\n                return record ? [record] : [];\n            }\n            const [queryStatement, params] = queryAllStatement(tableName, predicates, sortPredicates, limit, page);\n            return this.db.getAll(queryStatement, params);\n        })());\n        return this.load(namespaceName, modelConstructor.name, records);\n    }\n    async getById(tableName, id) {\n        const [queryStatement, params] = queryByIdStatement(id, tableName);\n        const record = await this.db.get(queryStatement, params);\n        return record;\n    }\n    idFromPredicate(predicates) {\n        const { predicates: predicateObjs } = predicates;\n        const idPredicate = predicateObjs.length === 1 &&\n            predicateObjs.find(p => isPredicateObj(p) && p.field === 'id' && p.operator === 'eq');\n        return idPredicate && idPredicate.operand;\n    }\n    async queryOne(modelConstructor, firstOrLast = QueryOne.FIRST) {\n        const { name: tableName } = modelConstructor;\n        const [queryStatement, params] = queryOneStatement(firstOrLast, tableName);\n        const result = await this.db.get(queryStatement, params);\n        const modelInstance = result && this.modelInstanceCreator(modelConstructor, result);\n        return modelInstance;\n    }\n    // Currently does not cascade\n    // TODO: use FKs in relations and have `ON DELETE CASCADE` set\n    // For Has Many and Has One relations to have SQL handle cascades automatically\n    async delete(modelOrModelConstructor, condition) {\n        if (isModelConstructor(modelOrModelConstructor)) {\n            const modelConstructor = modelOrModelConstructor;\n            const namespaceName = this.namespaceResolver(modelConstructor);\n            const { name: tableName } = modelConstructor;\n            const predicates = condition && ModelPredicateCreator.getPredicates(condition);\n            const queryStatement = queryAllStatement(tableName, predicates);\n            const deleteStatement = deleteByPredicateStatement(tableName, predicates);\n            const models = await this.db.selectAndDelete(queryStatement, deleteStatement);\n            const modelInstances = await this.load(namespaceName, modelConstructor.name, models);\n            return [modelInstances, modelInstances];\n        }\n        else {\n            const model = modelOrModelConstructor;\n            const modelConstructor = Object.getPrototypeOf(model)\n                .constructor;\n            const { name: tableName } = modelConstructor;\n            if (condition) {\n                const [queryStatement, params] = queryByIdStatement(model.id, tableName);\n                const fromDB = await this.db.get(queryStatement, params);\n                if (fromDB === undefined) {\n                    const msg = 'Model instance not found in storage';\n                    logger.warn(msg, { model });\n                    return [[model], []];\n                }\n                const predicates = ModelPredicateCreator.getPredicates(condition);\n                const { predicates: predicateObjs, type } = predicates;\n                const isValid = validatePredicate(fromDB, type, predicateObjs);\n                if (!isValid) {\n                    const msg = 'Conditional update failed';\n                    logger.error(msg, { model: fromDB, condition: predicateObjs });\n                    throw new Error(msg);\n                }\n                const [deleteStatement, deleteParams] = deleteByIdStatement(model.id, tableName);\n                await this.db.save(deleteStatement, deleteParams);\n                return [[model], [model]];\n            }\n            else {\n                const [deleteStatement, params] = deleteByIdStatement(model.id, tableName);\n                await this.db.save(deleteStatement, params);\n                return [[model], [model]];\n            }\n        }\n    }\n    async batchSave(modelConstructor, items) {\n        const { name: tableName } = modelConstructor;\n        const result = [];\n        const itemsToSave = [];\n        // To determine whether an item should result in an insert or update operation\n        // We first need to query the local DB on the item id\n        const queryStatements = new Set();\n        // Deletes don't need to be queried first, because if the item doesn't exist,\n        // the delete operation will be a no-op\n        const deleteStatements = new Set();\n        const saveStatements = new Set();\n        for (const item of items) {\n            const connectedModels = traverseModel(modelConstructor.name, this.modelInstanceCreator(modelConstructor, item), this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            const { id, _deleted } = item;\n            const { instance } = connectedModels.find(({ instance: connectedModelInstance }) => connectedModelInstance.id === id);\n            if (_deleted) {\n                // create the delete statements right away\n                const deleteStatement = deleteByIdStatement(instance.id, tableName);\n                deleteStatements.add(deleteStatement);\n                result.push([item, OpType.DELETE]);\n            }\n            else {\n                // query statements for the saves at first\n                const queryStatement = queryByIdStatement(id, tableName);\n                queryStatements.add(queryStatement);\n                // combination of insert and update items\n                itemsToSave.push(instance);\n            }\n        }\n        // returns the query results for each of the save items\n        const queryResponses = await this.db.batchQuery(queryStatements);\n        queryResponses.forEach((response, idx) => {\n            if (response === undefined) {\n                const insertStatement = modelInsertStatement(itemsToSave[idx], tableName);\n                saveStatements.add(insertStatement);\n                result.push([itemsToSave[idx], OpType.INSERT]);\n            }\n            else {\n                const updateStatement = modelUpdateStatement(itemsToSave[idx], tableName);\n                saveStatements.add(updateStatement);\n                result.push([itemsToSave[idx], OpType.UPDATE]);\n            }\n        });\n        // perform all of the insert/update/delete operations in a single transaction\n        await this.db.batchSave(saveStatements, deleteStatements);\n        return result;\n    }\n}\n"],"names":[],"mappings":"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"}