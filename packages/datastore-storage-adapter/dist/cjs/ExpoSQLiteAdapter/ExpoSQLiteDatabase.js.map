{"version":3,"file":"ExpoSQLiteDatabase.js","sources":["../../../src/ExpoSQLiteAdapter/ExpoSQLiteDatabase.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst core_1 = require(\"@aws-amplify/core\");\nconst expo_file_system_1 = require(\"expo-file-system\");\nconst expo_sqlite_1 = require(\"expo-sqlite\");\nconst constants_1 = require(\"../common/constants\");\nconst logger = new core_1.ConsoleLogger('ExpoSQLiteDatabase');\n/*\n\nNote:\nExpoSQLite transaction error callbacks require returning a boolean value to indicate whether the\nerror was handled or not. Returning a true value indicates the error was handled and does not\nrollback the whole transaction.\n\n*/\nclass ExpoSQLiteDatabase {\n    async init() {\n        // only open database once.\n        if (!this.db) {\n            // As per expo docs version, description and size arguments are ignored,\n            // but are accepted by the function for compatibility with the WebSQL specification.\n            // Hence, we do not need those arguments.\n            this.db = (0, expo_sqlite_1.openDatabase)(constants_1.DB_NAME);\n        }\n    }\n    createSchema(statements) {\n        return this.executeStatements(statements);\n    }\n    async clear() {\n        try {\n            logger.debug('Clearing database');\n            await this.closeDB();\n            // delete database is not supported by expo-sqlite.\n            // Database file needs to be deleted using deleteAsync from expo-file-system\n            await (0, expo_file_system_1.deleteAsync)(`${expo_file_system_1.documentDirectory}SQLite/${constants_1.DB_NAME}`);\n            logger.debug('Database cleared');\n        }\n        catch (error) {\n            logger.warn('Error clearing the database.', error);\n            // open database if it was closed earlier and this.db was set to undefined.\n            this.init();\n        }\n    }\n    async get(statement, params) {\n        const results = await this.getAll(statement, params);\n        return results[0];\n    }\n    getAll(statement, params) {\n        return new Promise((resolve, reject) => {\n            this.db.readTransaction(transaction => {\n                transaction.executeSql(statement, params, (_, result) => {\n                    resolve(result.rows._array || []);\n                }, (_, error) => {\n                    reject(error);\n                    logger.warn(error);\n                    return true;\n                });\n            });\n        });\n    }\n    save(statement, params) {\n        return new Promise((resolve, reject) => {\n            this.db.transaction(transaction => {\n                transaction.executeSql(statement, params, () => {\n                    resolve(null);\n                }, (_, error) => {\n                    reject(error);\n                    logger.warn(error);\n                    return true;\n                });\n            });\n        });\n    }\n    batchQuery(queryParameterizedStatements = new Set()) {\n        return new Promise((resolve, reject) => {\n            const resolveTransaction = resolve;\n            const rejectTransaction = reject;\n            this.db.transaction(async (transaction) => {\n                try {\n                    const results = await Promise.all([...queryParameterizedStatements].map(([statement, params]) => new Promise((_resolve, _reject) => {\n                        transaction.executeSql(statement, params, (_, result) => {\n                            _resolve(result.rows._array[0]);\n                        }, (_, error) => {\n                            _reject(error);\n                            logger.warn(error);\n                            return true;\n                        });\n                    })));\n                    resolveTransaction(results);\n                }\n                catch (error) {\n                    rejectTransaction(error);\n                    logger.warn(error);\n                }\n            });\n        });\n    }\n    batchSave(saveParameterizedStatements = new Set(), deleteParameterizedStatements) {\n        return new Promise((resolve, reject) => {\n            const resolveTransaction = resolve;\n            const rejectTransaction = reject;\n            this.db.transaction(async (transaction) => {\n                try {\n                    // await for all sql statements promises to resolve\n                    await Promise.all([...saveParameterizedStatements].map(([statement, params]) => new Promise((_resolve, _reject) => {\n                        transaction.executeSql(statement, params, () => {\n                            _resolve(null);\n                        }, (_, error) => {\n                            _reject(error);\n                            logger.warn(error);\n                            return true;\n                        });\n                    })));\n                    if (deleteParameterizedStatements) {\n                        await Promise.all([...deleteParameterizedStatements].map(([statement, params]) => new Promise((_resolve, _reject) => {\n                            transaction.executeSql(statement, params, () => {\n                                _resolve(null);\n                            }, (_, error) => {\n                                _reject(error);\n                                logger.warn(error);\n                                return true;\n                            });\n                        })));\n                    }\n                    resolveTransaction(null);\n                }\n                catch (error) {\n                    rejectTransaction(error);\n                    logger.warn(error);\n                }\n            });\n        });\n    }\n    selectAndDelete(queryParameterizedStatement, deleteParameterizedStatement) {\n        const [queryStatement, queryParams] = queryParameterizedStatement;\n        const [deleteStatement, deleteParams] = deleteParameterizedStatement;\n        return new Promise((resolve, reject) => {\n            const resolveTransaction = resolve;\n            const rejectTransaction = reject;\n            this.db.transaction(async (transaction) => {\n                try {\n                    const result = await new Promise((_resolve, _reject) => {\n                        transaction.executeSql(queryStatement, queryParams, (_, sqlResult) => {\n                            _resolve(sqlResult.rows._array || []);\n                        }, (_, error) => {\n                            _reject(error);\n                            logger.warn(error);\n                            return true;\n                        });\n                    });\n                    await new Promise((_resolve, _reject) => {\n                        transaction.executeSql(deleteStatement, deleteParams, () => {\n                            _resolve(null);\n                        }, (_, error) => {\n                            _reject(error);\n                            logger.warn(error);\n                            return true;\n                        });\n                    });\n                    resolveTransaction(result);\n                }\n                catch (error) {\n                    rejectTransaction(error);\n                    logger.warn(error);\n                }\n            });\n        });\n    }\n    executeStatements(statements) {\n        return new Promise((resolve, reject) => {\n            const resolveTransaction = resolve;\n            const rejectTransaction = reject;\n            this.db.transaction(async (transaction) => {\n                try {\n                    await Promise.all(statements.map(statement => new Promise((_resolve, _reject) => {\n                        transaction.executeSql(statement, [], () => {\n                            _resolve(null);\n                        }, (_, error) => {\n                            _reject(error);\n                            return true;\n                        });\n                    })));\n                    resolveTransaction(null);\n                }\n                catch (error) {\n                    rejectTransaction(error);\n                    logger.warn(error);\n                }\n            });\n        });\n    }\n    async closeDB() {\n        if (this.db) {\n            logger.debug('Closing Database');\n            // closing database is not supported by expo-sqlite.\n            // Workaround is to access the private db variable and call the close() method.\n            await this.db._db.close();\n            logger.debug('Database closed');\n            this.db = undefined;\n        }\n    }\n}\nexports.default = ExpoSQLiteDatabase;\n"],"names":[],"mappings":"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"}