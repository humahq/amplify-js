{"version":3,"file":"SQLiteUtils.js","sources":["../../../src/common/SQLiteUtils.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteByPredicateStatement = exports.deleteByIdStatement = exports.queryOneStatement = exports.queryAllStatement = exports.limitClauseFromPagination = exports.orderByClauseFromSort = exports.whereClauseFromPredicate = exports.whereConditionFromPredicateObject = exports.queryByIdStatement = exports.modelUpdateStatement = exports.modelInsertStatement = exports.modelCreateTableStatement = exports.implicitAuthFieldsForModel = exports.generateSchemaStatements = exports.getSQLiteType = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst datastore_1 = require(\"@aws-amplify/datastore\");\nconst { USER, isNonModelConstructor, isModelConstructor } = datastore_1.utils;\nconst keysFromModel = model => Object.keys(model)\n    .map(k => `\"${k}\"`)\n    .join(', ');\nconst valuesFromModel = (model) => {\n    const values = Object.values(model).map(prepareValueForDML);\n    const paramaterized = values.map(() => '?').join(', ');\n    return [paramaterized, values];\n};\nconst updateSet = model => {\n    const values = [];\n    const paramaterized = Object.entries(model)\n        .filter(([k]) => k !== 'id')\n        .map(([k, v]) => {\n        values.push(prepareValueForDML(v));\n        return `\"${k}\"=?`;\n    })\n        .join(', ');\n    return [paramaterized, values];\n};\nfunction prepareValueForDML(value) {\n    const scalarTypes = ['string', 'number', 'boolean'];\n    const isScalarType = value === null || value === undefined || scalarTypes.includes(typeof value);\n    if (isScalarType) {\n        return value;\n    }\n    const isObjectType = typeof value === 'object' &&\n        (Object.getPrototypeOf(value).constructor === Object ||\n            isNonModelConstructor(Object.getPrototypeOf(value).constructor) ||\n            isModelConstructor(Object.getPrototypeOf(value).constructor));\n    if (Array.isArray(value) || isObjectType) {\n        return JSON.stringify(value);\n    }\n    return `${value}`;\n}\nfunction getSQLiteType(scalar) {\n    switch (scalar) {\n        case 'Boolean':\n        case 'Int':\n        case 'AWSTimestamp':\n            return 'INTEGER';\n        case 'ID':\n        case 'String':\n        case 'AWSDate':\n        case 'AWSTime':\n        case 'AWSDateTime':\n        case 'AWSEmail':\n        case 'AWSJSON':\n        case 'AWSURL':\n        case 'AWSPhone':\n        case 'AWSIPAddress':\n            return 'TEXT';\n        case 'Float':\n            return 'REAL';\n        default: {\n            const _ = scalar;\n            throw new Error(`unknown type ${scalar}`);\n        }\n    }\n}\nexports.getSQLiteType = getSQLiteType;\nfunction generateSchemaStatements(schema) {\n    return Object.keys(schema.namespaces).flatMap(namespaceName => {\n        const namespace = schema.namespaces[namespaceName];\n        const isUserModel = namespaceName === USER;\n        return Object.values(namespace.models).map(model => modelCreateTableStatement(model, isUserModel));\n    });\n}\nexports.generateSchemaStatements = generateSchemaStatements;\nconst implicitAuthFieldsForModel = (model) => {\n    if (!model.attributes || !model.attributes.length) {\n        return [];\n    }\n    const authRules = model.attributes.find(datastore_1.isModelAttributeAuth);\n    if (!authRules) {\n        return [];\n    }\n    const authFieldsForModel = authRules.properties.rules\n        .filter((rule) => rule.ownerField || rule.groupsField)\n        .map((rule) => rule.ownerField || rule.groupsField);\n    return authFieldsForModel.filter((authField) => {\n        const authFieldExplicitlyDefined = Object.values(model.fields).find((f) => f.name === authField);\n        return !authFieldExplicitlyDefined;\n    });\n};\nexports.implicitAuthFieldsForModel = implicitAuthFieldsForModel;\nfunction modelCreateTableStatement(model, userModel = false) {\n    // implicitly defined auth fields, e.g., `owner`, `groupsField`, etc.\n    const implicitAuthFields = (0, exports.implicitAuthFieldsForModel)(model);\n    let fields = Object.values(model.fields).reduce((acc, field) => {\n        if ((0, datastore_1.isGraphQLScalarType)(field.type)) {\n            if (field.name === 'id') {\n                return [...acc, '\"id\" PRIMARY KEY NOT NULL'];\n            }\n            let columnParam = `\"${field.name}\" ${getSQLiteType(field.type)}`;\n            if (field.isRequired) {\n                columnParam += ' NOT NULL';\n            }\n            return [...acc, `${columnParam}`];\n        }\n        if ((0, datastore_1.isModelFieldType)(field.type)) {\n            let columnParam = `\"${field.name}\" TEXT`;\n            // add targetName as well as field name for BELONGS_TO relations\n            if ((0, datastore_1.isTargetNameAssociation)(field.association)) {\n                // check if this field has been explicitly defined in the model\n                const fkDefinedInModel = Object.values(model.fields).find((f) => f.name === field?.association?.targetName);\n                // if the FK is not explicitly defined in the model, we have to add it here\n                if (!fkDefinedInModel) {\n                    const required = field.isRequired ? ' NOT NULL' : '';\n                    columnParam += `, \"${field.association.targetName}\" TEXT${required}`;\n                }\n            }\n            // ignore isRequired param for model fields, since they will not contain\n            // the related data locally\n            return [...acc, `${columnParam}`];\n        }\n        // default to TEXT\n        let columnParam = `\"${field.name}\" TEXT`;\n        if (field.isRequired) {\n            columnParam += ' NOT NULL';\n        }\n        return [...acc, `${columnParam}`];\n    }, []);\n    implicitAuthFields.forEach((authField) => {\n        fields.push(`${authField} TEXT`);\n    });\n    if (userModel) {\n        fields = [\n            ...fields,\n            `\"_version\" INTEGER`,\n            `\"_lastChangedAt\" INTEGER`,\n            `\"_deleted\" INTEGER`,\n        ];\n    }\n    const createTableStatement = `CREATE TABLE IF NOT EXISTS \"${model.name}\" (${fields.join(', ')});`;\n    return createTableStatement;\n}\nexports.modelCreateTableStatement = modelCreateTableStatement;\nfunction modelInsertStatement(model, tableName) {\n    const keys = keysFromModel(model);\n    const [paramaterized, values] = valuesFromModel(model);\n    const insertStatement = `INSERT INTO \"${tableName}\" (${keys}) VALUES (${paramaterized})`;\n    return [insertStatement, values];\n}\nexports.modelInsertStatement = modelInsertStatement;\nfunction modelUpdateStatement(model, tableName) {\n    const [paramaterized, values] = updateSet(model);\n    const updateStatement = `UPDATE \"${tableName}\" SET ${paramaterized} WHERE id=?`;\n    return [updateStatement, [...values, model.id]];\n}\nexports.modelUpdateStatement = modelUpdateStatement;\nfunction queryByIdStatement(id, tableName) {\n    return [`SELECT * FROM \"${tableName}\" WHERE \"id\" = ?`, [id]];\n}\nexports.queryByIdStatement = queryByIdStatement;\n/*\n    Predicates supported by DataStore:\n\n    Strings: eq | ne | le | lt | ge | gt | contains | notContains | beginsWith | between\n    Numbers: eq | ne | le | lt | ge | gt | between\n    Lists: contains | notContains\n*/\nconst comparisonOperatorMap = {\n    eq: '=',\n    ne: '!=',\n    le: '<=',\n    lt: '<',\n    ge: '>=',\n    gt: '>',\n};\nconst logicalOperatorMap = {\n    beginsWith: '= 1',\n    contains: '> 0',\n    notContains: '= 0',\n    between: 'BETWEEN',\n};\n/**\n * If the given (operator, operand) indicate the need for a special `NULL` comparison,\n * that `WHERE` clause condition will be returned. If not special `NULL` handling is\n * needed, `null` will be returned, and the caller should construct the `WHERE`\n * clause component using the normal operator map(s) and parameterization.\n *\n * @param operator \"beginsWith\" | \"contains\" | \"notContains\" | \"between\"\n * | \"eq\" | \"ne\" | \"le\" | \"lt\" | \"ge\" | \"gt\"\n * @param operand any\n * @returns (string | null) The `WHERE` clause component or `null` if N/A.\n */\nfunction buildSpecialNullComparison(field, operator, operand) {\n    if (operand === null || operand === undefined) {\n        if (operator === 'eq') {\n            return `\"${field}\" IS NULL`;\n        }\n        else if (operator === 'ne') {\n            return `\"${field}\" IS NOT NULL`;\n        }\n    }\n    // no special null handling required\n    return null;\n}\nconst whereConditionFromPredicateObject = ({ field, operator, operand, }) => {\n    const specialNullClause = buildSpecialNullComparison(field, operator, operand);\n    if (specialNullClause) {\n        return [specialNullClause, []];\n    }\n    const comparisonOperator = comparisonOperatorMap[operator];\n    if (comparisonOperator) {\n        return [`\"${field}\" ${comparisonOperator} ?`, [operand]];\n    }\n    const logicalOperatorKey = operator;\n    const logicalOperator = logicalOperatorMap[logicalOperatorKey];\n    let statement;\n    if (logicalOperator) {\n        let rightExp = [];\n        switch (logicalOperatorKey) {\n            case 'between':\n                rightExp = operand; // operand is a 2-tuple\n                statement = [\n                    `\"${field}\" ${logicalOperator} ${rightExp\n                        .map(_ => '?')\n                        .join(' AND ')}`,\n                    rightExp,\n                ];\n                break;\n            case 'beginsWith':\n            case 'contains':\n            case 'notContains':\n                statement = [`instr(\"${field}\", ?) ${logicalOperator}`, [operand]];\n                break;\n            default: {\n                const _ = logicalOperatorKey;\n                // Incorrect WHERE clause can result in data loss\n                throw new Error('Cannot map predicate to a valid WHERE clause');\n            }\n        }\n        return statement;\n    }\n};\nexports.whereConditionFromPredicateObject = whereConditionFromPredicateObject;\nfunction whereClauseFromPredicate(predicate) {\n    const result = [];\n    const params = [];\n    recurse(predicate, result, params);\n    const whereClause = `WHERE ${result.join(' ')}`;\n    return [whereClause, params];\n    function recurse(recursedPredicate, recursedResult = [], recursedParams = []) {\n        if ((0, datastore_1.isPredicateGroup)(recursedPredicate)) {\n            const { type: groupType, predicates: groupPredicates } = recursedPredicate;\n            let filterType = '';\n            let isNegation = false;\n            switch (groupType) {\n                case 'not':\n                    isNegation = true;\n                    break;\n                case 'and':\n                    filterType = 'AND';\n                    break;\n                case 'or':\n                    filterType = 'OR';\n                    break;\n                default: {\n                    const _ = groupType;\n                    throw new Error(`Invalid ${groupType}`);\n                }\n            }\n            const groupResult = [];\n            for (const p of groupPredicates) {\n                recurse(p, groupResult, recursedParams);\n            }\n            recursedResult.push(`${isNegation ? 'NOT' : ''}(${groupResult.join(` ${filterType} `)})`);\n        }\n        else if ((0, datastore_1.isPredicateObj)(recursedPredicate)) {\n            const [condition, conditionParams] = (0, exports.whereConditionFromPredicateObject)(recursedPredicate);\n            recursedResult.push(condition);\n            recursedParams.push(...conditionParams);\n        }\n    }\n}\nexports.whereClauseFromPredicate = whereClauseFromPredicate;\nconst sortDirectionMap = {\n    ASCENDING: 'ASC',\n    DESCENDING: 'DESC',\n};\nfunction orderByClauseFromSort(sortPredicate = []) {\n    const orderByParts = sortPredicate.map(({ field, sortDirection }) => `\"${String(field)}\" ${sortDirectionMap[sortDirection]}`);\n    // We always sort by _rowid_ last\n    orderByParts.push(`_rowid_ ${sortDirectionMap.ASCENDING}`);\n    return `ORDER BY ${orderByParts.join(', ')}`;\n}\nexports.orderByClauseFromSort = orderByClauseFromSort;\nfunction limitClauseFromPagination(limit, page = 0) {\n    const params = [limit];\n    let clause = 'LIMIT ?';\n    if (page) {\n        const offset = limit * page;\n        params.push(offset);\n        clause += ' OFFSET ?';\n    }\n    return [clause, params];\n}\nexports.limitClauseFromPagination = limitClauseFromPagination;\nfunction queryAllStatement(tableName, predicate, sort, limit, page) {\n    let statement = `SELECT * FROM \"${tableName}\"`;\n    const params = [];\n    if (predicate && predicate.predicates.length) {\n        const [whereClause, whereParams] = whereClauseFromPredicate(predicate);\n        statement += ` ${whereClause}`;\n        params.push(...whereParams);\n    }\n    const orderByClause = orderByClauseFromSort(sort);\n    statement += ` ${orderByClause}`;\n    if (limit) {\n        const [limitClause, limitParams] = limitClauseFromPagination(limit, page);\n        statement += ` ${limitClause}`;\n        params.push(...limitParams);\n    }\n    return [statement, params];\n}\nexports.queryAllStatement = queryAllStatement;\nfunction queryOneStatement(firstOrLast, tableName) {\n    if (firstOrLast === datastore_1.QueryOne.FIRST) {\n        // ORDER BY rowid will no longer work as expected if a customer has\n        // a field by that name in their schema. We may want to enforce it\n        // as a reserved keyword in Codegen\n        return [`SELECT * FROM ${tableName} ORDER BY _rowid_ LIMIT 1`, []];\n    }\n    else {\n        return [`SELECT * FROM ${tableName} ORDER BY _rowid_ DESC LIMIT 1`, []];\n    }\n}\nexports.queryOneStatement = queryOneStatement;\nfunction deleteByIdStatement(id, tableName) {\n    const deleteStatement = `DELETE FROM \"${tableName}\" WHERE \"id\"=?`;\n    return [deleteStatement, [id]];\n}\nexports.deleteByIdStatement = deleteByIdStatement;\nfunction deleteByPredicateStatement(tableName, predicate) {\n    let statement = `DELETE FROM \"${tableName}\"`;\n    const params = [];\n    if (predicate && predicate.predicates.length) {\n        const [whereClause, whereParams] = whereClauseFromPredicate(predicate);\n        statement += ` ${whereClause}`;\n        params.push(...whereParams);\n    }\n    return [statement, params];\n}\nexports.deleteByPredicateStatement = deleteByPredicateStatement;\n"],"names":[],"mappings":"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"}