{"version":3,"file":"AmazonAIIdentifyPredictionsProvider.mjs","sources":["../../../src/providers/AmazonAIIdentifyPredictionsProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger, fetchAuthSession } from '@aws-amplify/core';\nimport { Category, PredictionsAction, getAmplifyUserAgentObject, } from '@aws-amplify/core/internals/utils';\nimport { getUrl } from '@aws-amplify/storage';\nimport { DetectFacesCommand, DetectLabelsCommand, DetectModerationLabelsCommand, DetectTextCommand, RecognizeCelebritiesCommand, RekognitionClient, SearchFacesByImageCommand, } from '@aws-sdk/client-rekognition';\nimport { AnalyzeDocumentCommand, DetectDocumentTextCommand, TextractClient, } from '@aws-sdk/client-textract';\nimport { PredictionsValidationErrorCode } from '../errors/types/validation';\nimport { assertValidationError } from '../errors/utils/assertValidationError';\nimport { isFileSource, isIdentifyBytesSource, isIdentifyCelebrities, isIdentifyFromCollection, isIdentifyLabelsInput, isIdentifyTextInput, isStorageSource, isValidIdentifyInput, } from '../types';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks, } from './IdentifyTextUtils';\nimport { blobToArrayBuffer, makeCamelCase, makeCamelCaseArray } from './Utils';\nconst logger = new ConsoleLogger('AmazonAIIdentifyPredictionsProvider');\nexport class AmazonAIIdentifyPredictionsProvider {\n    getProviderName() {\n        return 'AmazonAIIdentifyPredictionsProvider';\n    }\n    identify(input) {\n        assertValidationError(isValidIdentifyInput(input), PredictionsValidationErrorCode.InvalidInput);\n        if (isIdentifyTextInput(input)) {\n            logger.debug('identifyText');\n            return this.identifyText(input);\n        }\n        else if (isIdentifyLabelsInput(input)) {\n            logger.debug('identifyLabels');\n            return this.identifyLabels(input);\n        }\n        else {\n            logger.debug('identifyEntities');\n            return this.identifyEntities(input);\n        }\n    }\n    /**\n     * Verify user input source and converts it into source object readable by Rekognition and Textract.\n     * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n     * @param {IdentifySource} source - User input source that directs to the object user wants\n     * to identify (storage, file, or bytes).\n     * @return {Promise<Image>} - Promise resolving to the converted source object.\n     */\n    configureSource(source) {\n        return new Promise((resolve, reject) => {\n            if (isStorageSource(source)) {\n                const storageConfig = {\n                    accessLevel: source.level,\n                    targetIdentityId: source.identityId,\n                };\n                getUrl({ key: source.key, options: storageConfig })\n                    .then(value => {\n                    const parser = /https:\\/\\/([a-zA-Z0-9%\\-_.]+)\\.s3\\.[A-Za-z0-9%\\-._~]+\\/([a-zA-Z0-9%\\-._~/]+)\\?/;\n                    const parsedURL = value.url.toString().match(parser) ?? '';\n                    if (parsedURL.length < 3)\n                        reject(new Error('Invalid S3 key was given.'));\n                    resolve({\n                        S3Object: {\n                            Bucket: parsedURL[1],\n                            Name: decodeURIComponent(parsedURL[2]),\n                        },\n                    });\n                })\n                    .catch(err => {\n                    reject(err);\n                });\n            }\n            else if (isFileSource(source)) {\n                blobToArrayBuffer(source.file)\n                    .then(buffer => {\n                    resolve({ Bytes: new Uint8Array(buffer) });\n                })\n                    .catch(err => {\n                    reject(err);\n                });\n            }\n            else if (isIdentifyBytesSource(source)) {\n                const { bytes } = source;\n                if (bytes instanceof Blob) {\n                    blobToArrayBuffer(bytes)\n                        .then(buffer => {\n                        resolve({ Bytes: new Uint8Array(buffer) });\n                    })\n                        .catch(err => {\n                        reject(err);\n                    });\n                }\n                if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n                    resolve({ Bytes: new Uint8Array(bytes) });\n                }\n                // everything else can be directly passed to Rekognition / Textract.\n                resolve({ Bytes: bytes });\n            }\n            else {\n                reject(new Error('Input source is not configured correctly.'));\n            }\n        });\n    }\n    /**\n     * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n     * image and converts it into machine-readable text.\n     * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n     * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n     */\n    async identifyText(input) {\n        const { credentials } = await fetchAuthSession();\n        assertValidationError(!!credentials, PredictionsValidationErrorCode.NoCredentials);\n        const { identifyText = {} } = Amplify.getConfig().Predictions?.identify ?? {};\n        const { region = '', defaults = {} } = identifyText;\n        const { format: configFormat = 'PLAIN' } = defaults;\n        this.rekognitionClient = new RekognitionClient({\n            region,\n            credentials,\n            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n        });\n        this.textractClient = new TextractClient({\n            region,\n            credentials,\n            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n        });\n        const inputDocument = await this.configureSource(input.text?.source);\n        // get default value if format isn't specified in the input.\n        const format = input.text?.format ?? configFormat;\n        const featureTypes = []; // structures we want to analyze (e.g. [TABLES, FORMS]).\n        if (format === 'FORM' || format === 'ALL')\n            featureTypes.push('FORMS');\n        if (format === 'TABLE' || format === 'ALL')\n            featureTypes.push('TABLES');\n        if (featureTypes.length === 0) {\n            /**\n             * Empty featureTypes indicates that we will identify plain text. We will use rekognition (suitable\n             * for everyday images but has 50 word limit) first and see if reaches its word limit. If it does, then\n             * we call textract and use the data that identify more words.\n             */\n            const textractParam = {\n                Document: inputDocument,\n            };\n            const rekognitionParam = {\n                Image: inputDocument,\n            };\n            const detectTextCommand = new DetectTextCommand(rekognitionParam);\n            const rekognitionData = await this.rekognitionClient.send(detectTextCommand);\n            const rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n            if (rekognitionResponse.text.words.length < 50) {\n                // did not hit the word limit, return the data\n                return rekognitionResponse;\n            }\n            const detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n            const { Blocks } = await this.textractClient.send(detectDocumentTextCommand);\n            if ((rekognitionData.TextDetections?.length ?? 0) > (Blocks?.length ?? 0)) {\n                return rekognitionResponse;\n            }\n            return categorizeTextractBlocks(Blocks);\n        }\n        else {\n            const param = {\n                Document: inputDocument,\n                FeatureTypes: featureTypes,\n            };\n            const analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n            const { Blocks } = await this.textractClient.send(analyzeDocumentCommand);\n            return categorizeTextractBlocks(Blocks);\n        }\n    }\n    /**\n     * Identify instances of real world entities from an image and if it contains unsafe content.\n     * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n     */\n    async identifyLabels(input) {\n        const { credentials } = await fetchAuthSession();\n        assertValidationError(!!credentials, PredictionsValidationErrorCode.NoCredentials);\n        const { identifyLabels = {} } = Amplify.getConfig().Predictions?.identify ?? {};\n        const { region = '', defaults = {} } = identifyLabels;\n        const { type = 'LABELS' } = defaults;\n        this.rekognitionClient = new RekognitionClient({\n            region,\n            credentials,\n            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n        });\n        const inputImage = await this.configureSource(input.labels?.source);\n        const param = { Image: inputImage };\n        const servicePromises = [];\n        // get default argument\n        const entityType = input.labels?.type ?? type;\n        if (entityType === 'LABELS' || entityType === 'ALL') {\n            servicePromises.push(this.detectLabels(param));\n        }\n        if (entityType === 'UNSAFE' || entityType === 'ALL') {\n            servicePromises.push(this.detectModerationLabels(param));\n        }\n        return Promise.all(servicePromises).then(data => {\n            let identifyResult = {};\n            // concatenate resolved promises to a single object\n            data.forEach(val => {\n                identifyResult = { ...identifyResult, ...val };\n            });\n            return identifyResult;\n        });\n    }\n    /**\n     * Calls Rekognition.detectLabels and organizes the returned data.\n     * @param param - parameters as {@link DetectLabelsCommandInput} to be passed onto Rekognition\n     * @return a promise resolving to organized detectLabels response as {@link IdentifyLabelsOutput}.\n     */\n    async detectLabels(param) {\n        const detectLabelsCommand = new DetectLabelsCommand(param);\n        const data = await this.rekognitionClient.send(detectLabelsCommand);\n        if (!data.Labels)\n            return {}; // no image was detected\n        const detectLabelData = data.Labels.map(label => {\n            const boxes = label.Instances?.map(instance => makeCamelCase(instance.BoundingBox)) || [];\n            return {\n                name: label.Name,\n                boundingBoxes: boxes,\n                metadata: {\n                    confidence: label.Confidence,\n                    parents: makeCamelCaseArray(label.Parents),\n                },\n            };\n        });\n        return { labels: detectLabelData };\n    }\n    /**\n     * Calls Rekognition.detectModerationLabels and organizes the returned data.\n     * @param param parameter to be passed onto Rekognition as {@link DetectModerationLabelsCommandInput}\n     * @return a promise resolving to organized detectModerationLabels response as {@link IdentifyLabelsOutput}.\n     */\n    async detectModerationLabels(param) {\n        const detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n        const data = await this.rekognitionClient.send(detectModerationLabelsCommand);\n        if (data.ModerationLabels?.length !== 0) {\n            return { unsafe: 'YES' };\n        }\n        else {\n            return { unsafe: 'NO' };\n        }\n    }\n    /**\n     * Identify faces within an image that is provided as input, and match faces from a collection\n     * or identify celebrities.\n     * @param input - object of {@link IdentifyEntitiesInput} containing the source image and face match options.\n     * @return a promise resolving to identify results as {@link IdentifyEntitiesOutput}.\n     */\n    async identifyEntities(input) {\n        const { credentials } = await fetchAuthSession();\n        assertValidationError(!!credentials, PredictionsValidationErrorCode.NoCredentials);\n        const { identifyEntities = {} } = Amplify.getConfig().Predictions?.identify ?? {};\n        const { region = '', celebrityDetectionEnabled = false, defaults = {}, } = identifyEntities;\n        const { collectionId: collectionIdConfig = '', maxEntities: maxFacesConfig = 50, } = defaults;\n        // default arguments\n        this.rekognitionClient = new RekognitionClient({\n            region,\n            credentials,\n            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n        });\n        const inputImage = await this.configureSource(input.entities?.source);\n        const param = { Attributes: ['ALL'], Image: inputImage };\n        if (isIdentifyCelebrities(input.entities) &&\n            input.entities.celebrityDetection) {\n            assertValidationError(celebrityDetectionEnabled, PredictionsValidationErrorCode.CelebrityDetectionNotEnabled);\n            const recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n            const data = await this.rekognitionClient.send(recognizeCelebritiesCommand);\n            const faces = data.CelebrityFaces?.map(celebrity => ({\n                boundingBox: makeCamelCase(celebrity.Face?.BoundingBox),\n                landmarks: makeCamelCaseArray(celebrity.Face?.Landmarks),\n                metadata: {\n                    ...makeCamelCase(celebrity, ['Id', 'Name', 'Urls']),\n                    pose: makeCamelCase(celebrity.Face?.Pose),\n                },\n            })) ?? [];\n            return { entities: faces };\n        }\n        else if (isIdentifyFromCollection(input.entities) &&\n            input.entities.collection) {\n            const { collectionId = collectionIdConfig, maxEntities: maxFaces = maxFacesConfig, } = input.entities;\n            // Concatenate additional parameters\n            const updatedParam = {\n                ...param,\n                CollectionId: collectionId,\n                MaxFaces: maxFaces,\n            };\n            const searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n            const data = await this.rekognitionClient.send(searchFacesByImageCommand);\n            const faces = data.FaceMatches?.map(match => {\n                const externalImageId = match.Face?.ExternalImageId\n                    ? this.decodeExternalImageId(match.Face.ExternalImageId)\n                    : undefined;\n                return {\n                    boundingBox: makeCamelCase(match.Face?.BoundingBox),\n                    metadata: {\n                        externalImageId,\n                        similarity: match.Similarity,\n                    },\n                };\n            }) ?? [];\n            return { entities: faces };\n        }\n        else {\n            const detectFacesCommand = new DetectFacesCommand(param);\n            const data = await this.rekognitionClient.send(detectFacesCommand);\n            const faces = data.FaceDetails?.map(detail => {\n                // face attributes keys we want to extract from Rekognition's response\n                const attributeKeys = [\n                    'Smile',\n                    'Eyeglasses',\n                    'Sunglasses',\n                    'Gender',\n                    'Beard',\n                    'Mustache',\n                    'EyesOpen',\n                    'MouthOpen',\n                ];\n                const faceAttributes = makeCamelCase(detail, attributeKeys);\n                faceAttributes.emotions = detail.Emotions?.map(emotion => emotion.Type);\n                return {\n                    boundingBox: makeCamelCase(detail.BoundingBox),\n                    landmarks: makeCamelCaseArray(detail.Landmarks),\n                    ageRange: makeCamelCase(detail.AgeRange),\n                    attributes: faceAttributes,\n                    metadata: {\n                        confidence: detail.Confidence,\n                        pose: makeCamelCase(detail.Pose),\n                    },\n                };\n            }) ?? [];\n            return { entities: faces };\n        }\n    }\n    decodeExternalImageId(externalImageId) {\n        return ('' + externalImageId).replace(/::/g, '/');\n    }\n}\nfunction _getPredictionsIdentifyAmplifyUserAgent() {\n    return getAmplifyUserAgentObject({\n        category: Category.Predictions,\n        action: PredictionsAction.Identify,\n    });\n}\n"],"names":[],"mappings":"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"}