{"version":3,"file":"IdentifyTextUtils.mjs","sources":["../../../src/providers/IdentifyTextUtils.ts"],"sourcesContent":["import { makeCamelCase, makeCamelCaseArray } from './Utils';\nfunction getBoundingBox(geometry) {\n    return makeCamelCase(geometry?.BoundingBox);\n}\nfunction getPolygon(geometry) {\n    if (!geometry?.Polygon)\n        return undefined;\n    return makeCamelCaseArray(Array.from(geometry.Polygon));\n}\n/**\n * Organizes blocks from Rekognition API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\nexport function categorizeRekognitionBlocks(blocks) {\n    // Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n    const response = {\n        text: {\n            fullText: '',\n            words: [],\n            lines: [],\n            linesDetailed: [],\n        },\n    };\n    // We categorize each block by running a forEach loop through them.\n    blocks.forEach(block => {\n        switch (block.Type) {\n            case 'LINE':\n                if (block.DetectedText) {\n                    response.text.lines.push(block.DetectedText);\n                }\n                response.text.linesDetailed.push({\n                    text: block.DetectedText,\n                    polygon: getPolygon(block.Geometry),\n                    boundingBox: getBoundingBox(block.Geometry),\n                    page: undefined, // rekognition doesn't have this info\n                });\n                break;\n            case 'WORD':\n                response.text.fullText += block.DetectedText + ' ';\n                response.text.words.push({\n                    text: block.DetectedText,\n                    polygon: getPolygon(block.Geometry),\n                    boundingBox: getBoundingBox(block.Geometry),\n                });\n                break;\n        }\n    });\n    // remove trailing space of fullText\n    response.text.fullText = response.text.fullText.substr(0, response.text.fullText.length - 1);\n    return response;\n}\n/**\n * Organizes blocks from Textract API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\nexport function categorizeTextractBlocks(blocks) {\n    // Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n    const response = {\n        text: {\n            fullText: '',\n            words: [],\n            lines: [],\n            linesDetailed: [],\n        },\n    };\n    // if blocks is an empty array, ie. textract did not detect anything, return empty response.\n    if (blocks.length === 0)\n        return response;\n    /**\n     * We categorize each of the blocks by running a forEach loop through them.\n     *\n     * For complex structures such as Tables and KeyValue, we need to trasverse through their children. To do so,\n     * we will post-process them after the for each loop. We do this by storing table and keyvalues in arrays and\n     * mapping other blocks in `blockMap` (id to block) so we can reference them easily later.\n     *\n     * Note that we do not map `WORD` and `TABLE` in `blockMap` because they will not be referenced by any other\n     * block except the Page block.\n     */\n    const tableBlocks = [];\n    const keyValueBlocks = [];\n    const blockMap = {};\n    blocks.forEach(block => {\n        switch (block.BlockType) {\n            case 'LINE':\n                if (block.Text) {\n                    response.text.lines.push(block.Text);\n                }\n                response.text.linesDetailed.push({\n                    text: block.Text,\n                    polygon: getPolygon(block.Geometry),\n                    boundingBox: getBoundingBox(block.Geometry),\n                    page: block.Page,\n                });\n                break;\n            case 'WORD':\n                response.text.fullText += block.Text + ' ';\n                response.text.words.push({\n                    text: block.Text,\n                    polygon: getPolygon(block.Geometry),\n                    boundingBox: getBoundingBox(block.Geometry),\n                });\n                if (block.Id) {\n                    blockMap[block.Id] = block;\n                }\n                break;\n            case 'SELECTION_ELEMENT': {\n                const selectionStatus = block.SelectionStatus === 'SELECTED';\n                if (!response.text.selections)\n                    response.text.selections = [];\n                response.text.selections.push({\n                    selected: selectionStatus,\n                    polygon: getPolygon(block.Geometry),\n                    boundingBox: getBoundingBox(block.Geometry),\n                });\n                if (block.Id) {\n                    blockMap[block.Id] = block;\n                }\n                break;\n            }\n            case 'TABLE':\n                tableBlocks.push(block);\n                break;\n            case 'KEY_VALUE_SET':\n                keyValueBlocks.push(block);\n                if (block.Id) {\n                    blockMap[block.Id] = block;\n                }\n                break;\n            default:\n                if (block.Id) {\n                    blockMap[block.Id] = block;\n                }\n        }\n    });\n    // remove trailing space in fullText\n    response.text.fullText = response.text.fullText.substr(0, response.text.fullText.length - 1);\n    // Post-process complex structures if they exist.\n    if (tableBlocks.length !== 0) {\n        const tableResponse = [];\n        tableBlocks.forEach(table => {\n            tableResponse.push(constructTable(table, blockMap));\n        });\n        response.text.tables = tableResponse;\n    }\n    if (keyValueBlocks.length !== 0) {\n        const keyValueResponse = [];\n        keyValueBlocks.forEach(keyValue => {\n            // We need the KeyValue blocks of EntityType = `KEY`, which has both key and value references.\n            if (keyValue.EntityTypes) {\n                const entityTypes = Array.from(keyValue.EntityTypes);\n                if (entityTypes.indexOf('KEY') !== -1) {\n                    keyValueResponse.push(constructKeyValue(keyValue, blockMap));\n                }\n            }\n        });\n        response.text.keyValues = keyValueResponse;\n    }\n    return response;\n}\n/**\n * Constructs a table object using data from its children cells.\n * @param {Block} table - Table block that has references (`Relationships`) to its cells\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nfunction constructTable(table, blockMap) {\n    const tableMatrix = [];\n    // visit each of the cell associated with the table's relationship.\n    for (const tableRelation of table.Relationships ?? []) {\n        for (const cellId of tableRelation.Ids ?? []) {\n            const cellBlock = blockMap[cellId];\n            if (cellBlock.RowIndex && cellBlock.ColumnIndex) {\n                const row = cellBlock.RowIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n                const col = cellBlock.ColumnIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n                // extract data contained inside the cell.\n                const content = extractContentsFromBlock(cellBlock, blockMap);\n                const cell = {\n                    text: content.text,\n                    boundingBox: getBoundingBox(cellBlock.Geometry),\n                    polygon: getPolygon(cellBlock.Geometry),\n                    selected: content.selected,\n                    rowSpan: cellBlock.RowSpan,\n                    columnSpan: cellBlock.ColumnSpan,\n                };\n                if (!tableMatrix[row])\n                    tableMatrix[row] = [];\n                tableMatrix[row][col] = cell;\n            }\n        }\n    }\n    const rowSize = tableMatrix.length;\n    const columnSize = tableMatrix[0].length;\n    const boundingBox = getBoundingBox(table.Geometry);\n    const polygon = getPolygon(table.Geometry);\n    // Note that we leave spanned cells undefined for distinction\n    return {\n        size: { rows: rowSize, columns: columnSize },\n        table: tableMatrix,\n        boundingBox,\n        polygon,\n    };\n}\n/**\n * Constructs a key value object from its children key and value blocks.\n * @param {Block} KeyValue - KeyValue block that has references (`Relationships`) to its children.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nfunction constructKeyValue(keyBlock, blockMap) {\n    let keyText = '';\n    let valueText = '';\n    let valueSelected = false;\n    for (const keyValueRelation of keyBlock.Relationships ?? []) {\n        if (keyValueRelation.Type === 'CHILD') {\n            // relation refers to key\n            const contents = extractContentsFromBlock(keyBlock, blockMap);\n            keyText = contents.text ?? '';\n        }\n        else if (keyValueRelation.Type === 'VALUE') {\n            // relation refers to value\n            for (const valueId of keyValueRelation.Ids ?? []) {\n                const valueBlock = blockMap[valueId];\n                const contents = extractContentsFromBlock(valueBlock, blockMap);\n                valueText = contents.text ?? '';\n                if (contents.selected != null)\n                    valueSelected = contents.selected;\n            }\n        }\n    }\n    return {\n        key: keyText,\n        value: { text: valueText, selected: valueSelected },\n        polygon: getPolygon(keyBlock.Geometry),\n        boundingBox: getBoundingBox(keyBlock.Geometry),\n    };\n}\n/**\n * Extracts text and selection from input block's children.\n * @param {Block}} block - Block that we want to extract contents from.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nfunction extractContentsFromBlock(block, blockMap) {\n    let words = '';\n    let isSelected = false;\n    if (!block.Relationships) {\n        // some block might have no content\n        return { text: '', selected: undefined };\n    }\n    for (const relation of block.Relationships) {\n        for (const contentId of relation.Ids ?? []) {\n            const contentBlock = blockMap[contentId];\n            if (contentBlock.BlockType === 'WORD') {\n                words += contentBlock.Text + ' ';\n            }\n            else if (contentBlock.BlockType === 'SELECTION_ELEMENT') {\n                isSelected = contentBlock.SelectionStatus === 'SELECTED';\n            }\n        }\n    }\n    words = words.substr(0, words.length - 1); // remove trailing space.\n    return { text: words, selected: isSelected };\n}\n"],"names":[],"mappings":";;AACA,SAAS,cAAc,CAAC,QAAQ,EAAE;AAClC,IAAI,OAAO,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAChD,CAAC;AACD,SAAS,UAAU,CAAC,QAAQ,EAAE;AAC9B,IAAI,IAAI,CAAC,QAAQ,EAAE,OAAO;AAC1B,QAAQ,OAAO,SAAS,CAAC;AACzB,IAAI,OAAO,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,2BAA2B,CAAC,MAAM,EAAE;AACpD;AACA,IAAI,MAAM,QAAQ,GAAG;AACrB,QAAQ,IAAI,EAAE;AACd,YAAY,QAAQ,EAAE,EAAE;AACxB,YAAY,KAAK,EAAE,EAAE;AACrB,YAAY,KAAK,EAAE,EAAE;AACrB,YAAY,aAAa,EAAE,EAAE;AAC7B,SAAS;AACT,KAAK,CAAC;AACN;AACA,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI;AAC5B,QAAQ,QAAQ,KAAK,CAAC,IAAI;AAC1B,YAAY,KAAK,MAAM;AACvB,gBAAgB,IAAI,KAAK,CAAC,YAAY,EAAE;AACxC,oBAAoB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;AACjE,iBAAiB;AACjB,gBAAgB,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;AACjD,oBAAoB,IAAI,EAAE,KAAK,CAAC,YAAY;AAC5C,oBAAoB,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;AACvD,oBAAoB,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/D,oBAAoB,IAAI,EAAE,SAAS;AACnC,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,MAAM;AACtB,YAAY,KAAK,MAAM;AACvB,gBAAgB,QAAQ,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;AACnE,gBAAgB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;AACzC,oBAAoB,IAAI,EAAE,KAAK,CAAC,YAAY;AAC5C,oBAAoB,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;AACvD,oBAAoB,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/D,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,MAAM;AACtB,SAAS;AACT,KAAK,CAAC,CAAC;AACP;AACA,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACjG,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,wBAAwB,CAAC,MAAM,EAAE;AACjD;AACA,IAAI,MAAM,QAAQ,GAAG;AACrB,QAAQ,IAAI,EAAE;AACd,YAAY,QAAQ,EAAE,EAAE;AACxB,YAAY,KAAK,EAAE,EAAE;AACrB,YAAY,KAAK,EAAE,EAAE;AACrB,YAAY,aAAa,EAAE,EAAE;AAC7B,SAAS;AACT,KAAK,CAAC;AACN;AACA,IAAI,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;AAC3B,QAAQ,OAAO,QAAQ,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,WAAW,GAAG,EAAE,CAAC;AAC3B,IAAI,MAAM,cAAc,GAAG,EAAE,CAAC;AAC9B,IAAI,MAAM,QAAQ,GAAG,EAAE,CAAC;AACxB,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI;AAC5B,QAAQ,QAAQ,KAAK,CAAC,SAAS;AAC/B,YAAY,KAAK,MAAM;AACvB,gBAAgB,IAAI,KAAK,CAAC,IAAI,EAAE;AAChC,oBAAoB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACzD,iBAAiB;AACjB,gBAAgB,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;AACjD,oBAAoB,IAAI,EAAE,KAAK,CAAC,IAAI;AACpC,oBAAoB,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;AACvD,oBAAoB,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/D,oBAAoB,IAAI,EAAE,KAAK,CAAC,IAAI;AACpC,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,MAAM;AACtB,YAAY,KAAK,MAAM;AACvB,gBAAgB,QAAQ,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC;AAC3D,gBAAgB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;AACzC,oBAAoB,IAAI,EAAE,KAAK,CAAC,IAAI;AACpC,oBAAoB,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;AACvD,oBAAoB,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/D,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,IAAI,KAAK,CAAC,EAAE,EAAE;AAC9B,oBAAoB,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,MAAM;AACtB,YAAY,KAAK,mBAAmB,EAAE;AACtC,gBAAgB,MAAM,eAAe,GAAG,KAAK,CAAC,eAAe,KAAK,UAAU,CAAC;AAC7E,gBAAgB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU;AAC7C,oBAAoB,QAAQ,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAClD,gBAAgB,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;AAC9C,oBAAoB,QAAQ,EAAE,eAAe;AAC7C,oBAAoB,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;AACvD,oBAAoB,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/D,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,IAAI,KAAK,CAAC,EAAE,EAAE;AAC9B,oBAAoB,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,MAAM;AACtB,aAAa;AACb,YAAY,KAAK,OAAO;AACxB,gBAAgB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxC,gBAAgB,MAAM;AACtB,YAAY,KAAK,eAAe;AAChC,gBAAgB,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3C,gBAAgB,IAAI,KAAK,CAAC,EAAE,EAAE;AAC9B,oBAAoB,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;AAC/C,iBAAiB;AACjB,gBAAgB,MAAM;AACtB,YAAY;AACZ,gBAAgB,IAAI,KAAK,CAAC,EAAE,EAAE;AAC9B,oBAAoB,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;AAC/C,iBAAiB;AACjB,SAAS;AACT,KAAK,CAAC,CAAC;AACP;AACA,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACjG;AACA,IAAI,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;AAClC,QAAQ,MAAM,aAAa,GAAG,EAAE,CAAC;AACjC,QAAQ,WAAW,CAAC,OAAO,CAAC,KAAK,IAAI;AACrC,YAAY,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AAChE,SAAS,CAAC,CAAC;AACX,QAAQ,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;AACrC,QAAQ,MAAM,gBAAgB,GAAG,EAAE,CAAC;AACpC,QAAQ,cAAc,CAAC,OAAO,CAAC,QAAQ,IAAI;AAC3C;AACA,YAAY,IAAI,QAAQ,CAAC,WAAW,EAAE;AACtC,gBAAgB,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AACrE,gBAAgB,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AACvD,oBAAoB,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;AACjF,iBAAiB;AACjB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC;AACnD,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE;AACzC,IAAI,MAAM,WAAW,GAAG,EAAE,CAAC;AAC3B;AACA,IAAI,KAAK,MAAM,aAAa,IAAI,KAAK,CAAC,aAAa,IAAI,EAAE,EAAE;AAC3D,QAAQ,KAAK,MAAM,MAAM,IAAI,aAAa,CAAC,GAAG,IAAI,EAAE,EAAE;AACtD,YAAY,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC/C,YAAY,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,WAAW,EAAE;AAC7D,gBAAgB,MAAM,GAAG,GAAG,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;AACnD,gBAAgB,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,GAAG,CAAC,CAAC;AACtD;AACA,gBAAgB,MAAM,OAAO,GAAG,wBAAwB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC9E,gBAAgB,MAAM,IAAI,GAAG;AAC7B,oBAAoB,IAAI,EAAE,OAAO,CAAC,IAAI;AACtC,oBAAoB,WAAW,EAAE,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;AACnE,oBAAoB,OAAO,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC3D,oBAAoB,QAAQ,EAAE,OAAO,CAAC,QAAQ;AAC9C,oBAAoB,OAAO,EAAE,SAAS,CAAC,OAAO;AAC9C,oBAAoB,UAAU,EAAE,SAAS,CAAC,UAAU;AACpD,iBAAiB,CAAC;AAClB,gBAAgB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;AACrC,oBAAoB,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAC1C,gBAAgB,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AAC7C,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC;AACvC,IAAI,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AAC7C,IAAI,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACvD,IAAI,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC/C;AACA,IAAI,OAAO;AACX,QAAQ,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE;AACpD,QAAQ,KAAK,EAAE,WAAW;AAC1B,QAAQ,WAAW;AACnB,QAAQ,OAAO;AACf,KAAK,CAAC;AACN,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,EAAE;AAC/C,IAAI,IAAI,OAAO,GAAG,EAAE,CAAC;AACrB,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;AACvB,IAAI,IAAI,aAAa,GAAG,KAAK,CAAC;AAC9B,IAAI,KAAK,MAAM,gBAAgB,IAAI,QAAQ,CAAC,aAAa,IAAI,EAAE,EAAE;AACjE,QAAQ,IAAI,gBAAgB,CAAC,IAAI,KAAK,OAAO,EAAE;AAC/C;AACA,YAAY,MAAM,QAAQ,GAAG,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC1E,YAAY,OAAO,GAAG,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;AAC1C,SAAS;AACT,aAAa,IAAI,gBAAgB,CAAC,IAAI,KAAK,OAAO,EAAE;AACpD;AACA,YAAY,KAAK,MAAM,OAAO,IAAI,gBAAgB,CAAC,GAAG,IAAI,EAAE,EAAE;AAC9D,gBAAgB,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AACrD,gBAAgB,MAAM,QAAQ,GAAG,wBAAwB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAChF,gBAAgB,SAAS,GAAG,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;AAChD,gBAAgB,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI;AAC7C,oBAAoB,aAAa,GAAG,QAAQ,CAAC,QAAQ,CAAC;AACtD,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,OAAO;AACX,QAAQ,GAAG,EAAE,OAAO;AACpB,QAAQ,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;AAC3D,QAAQ,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC9C,QAAQ,WAAW,EAAE,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACtD,KAAK,CAAC;AACN,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB,CAAC,KAAK,EAAE,QAAQ,EAAE;AACnD,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;AACnB,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;AAC9B;AACA,QAAQ,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;AACjD,KAAK;AACL,IAAI,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,aAAa,EAAE;AAChD,QAAQ,KAAK,MAAM,SAAS,IAAI,QAAQ,CAAC,GAAG,IAAI,EAAE,EAAE;AACpD,YAAY,MAAM,YAAY,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;AACrD,YAAY,IAAI,YAAY,CAAC,SAAS,KAAK,MAAM,EAAE;AACnD,gBAAgB,KAAK,IAAI,YAAY,CAAC,IAAI,GAAG,GAAG,CAAC;AACjD,aAAa;AACb,iBAAiB,IAAI,YAAY,CAAC,SAAS,KAAK,mBAAmB,EAAE;AACrE,gBAAgB,UAAU,GAAG,YAAY,CAAC,eAAe,KAAK,UAAU,CAAC;AACzE,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC9C,IAAI,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;AACjD;;;;"}