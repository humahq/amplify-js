{"version":3,"file":"AmazonAIInterpretPredictionsProvider.mjs","sources":["../../../src/providers/AmazonAIInterpretPredictionsProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { Category, PredictionsAction, getAmplifyUserAgentObject, } from '@aws-amplify/core/internals/utils';\nimport { ComprehendClient, DetectDominantLanguageCommand, DetectEntitiesCommand, DetectKeyPhrasesCommand, DetectSentimentCommand, DetectSyntaxCommand, } from '@aws-sdk/client-comprehend';\nimport { PredictionsValidationErrorCode } from '../errors/types/validation';\nimport { assertValidationError } from '../errors/utils/assertValidationError';\nimport { isInterpretTextOthers, isValidInterpretInput, } from '../types';\nexport class AmazonAIInterpretPredictionsProvider {\n    getProviderName() {\n        return 'AmazonAIInterpretPredictionsProvider';\n    }\n    interpret(input) {\n        assertValidationError(isValidInterpretInput(input), PredictionsValidationErrorCode.InvalidInput);\n        return this.interpretText(input);\n    }\n    async interpretText(input) {\n        const { credentials } = await fetchAuthSession();\n        assertValidationError(!!credentials, PredictionsValidationErrorCode.NoCredentials);\n        const { interpretText = {} } = Amplify.getConfig().Predictions?.interpret ?? {};\n        const { region = '', defaults = {} } = interpretText;\n        const { type: defaultType = '' } = defaults;\n        const { text: textSource } = input;\n        const { source, type = defaultType } = textSource;\n        const { text } = source;\n        let sourceLanguage;\n        if (isInterpretTextOthers(textSource)) {\n            sourceLanguage = textSource.source.language;\n        }\n        this.comprehendClient = new ComprehendClient({\n            credentials,\n            region,\n            customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Interpret,\n            }),\n        });\n        const doAll = type === 'all';\n        let languageCode = sourceLanguage;\n        if (doAll || type === 'language') {\n            const languageDetectionParams = {\n                Text: text,\n            };\n            languageCode = await this.detectLanguage(languageDetectionParams);\n        }\n        let entitiesPromise;\n        if (doAll || type === 'entities') {\n            assertValidationError(!!languageCode, PredictionsValidationErrorCode.NoLanguage);\n            const entitiesDetectionParams = {\n                Text: text,\n                LanguageCode: languageCode,\n            };\n            entitiesPromise = this.detectEntities(entitiesDetectionParams);\n        }\n        let sentimentPromise;\n        if (doAll || type === 'sentiment') {\n            assertValidationError(!!languageCode, PredictionsValidationErrorCode.NoLanguage);\n            const sentimentParams = {\n                Text: text,\n                LanguageCode: languageCode,\n            };\n            sentimentPromise = this.detectSentiment(sentimentParams);\n        }\n        let syntaxPromise;\n        if (doAll || type === 'syntax') {\n            assertValidationError(!!languageCode, PredictionsValidationErrorCode.NoLanguage);\n            const syntaxParams = {\n                Text: text,\n                LanguageCode: languageCode,\n            };\n            syntaxPromise = this.detectSyntax(syntaxParams);\n        }\n        let keyPhrasesPromise;\n        if (doAll || type === 'keyPhrases') {\n            assertValidationError(!!languageCode, PredictionsValidationErrorCode.NoLanguage);\n            const keyPhrasesParams = {\n                Text: text,\n                LanguageCode: languageCode,\n            };\n            keyPhrasesPromise = this.detectKeyPhrases(keyPhrasesParams);\n        }\n        const [textEntities, sentiment, syntax, keyPhrases] = await Promise.all([\n            entitiesPromise,\n            sentimentPromise,\n            syntaxPromise,\n            keyPhrasesPromise,\n        ]);\n        return {\n            textInterpretation: {\n                keyPhrases,\n                language: languageCode,\n                sentiment,\n                syntax,\n                textEntities,\n            },\n        };\n    }\n    async detectKeyPhrases(params) {\n        try {\n            const detectKeyPhrasesCommand = new DetectKeyPhrasesCommand(params);\n            const data = await this.comprehendClient.send(detectKeyPhrasesCommand);\n            const { KeyPhrases: keyPhrases = [] } = data || {};\n            return keyPhrases.map(({ Text: text }) => {\n                return { text };\n            });\n        }\n        catch (err) {\n            if (err.code === 'AccessDeniedException') {\n                throw new Error('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n                    'amplify predictions add');\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async detectSyntax(params) {\n        try {\n            const detectSyntaxCommand = new DetectSyntaxCommand(params);\n            const data = await this.comprehendClient.send(detectSyntaxCommand);\n            const { SyntaxTokens = [] } = data || {};\n            return this.serializeSyntaxFromComprehend(SyntaxTokens);\n        }\n        catch (err) {\n            if (err.code === 'AccessDeniedException') {\n                throw new Error('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n                    'amplify predictions add');\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    serializeSyntaxFromComprehend(tokens) {\n        let response = [];\n        if (tokens && Array.isArray(tokens)) {\n            response = tokens.map(({ Text: text = '', PartOfSpeech: { Tag: syntax = '' } = {} }) => {\n                return { text, syntax };\n            });\n        }\n        return response;\n    }\n    async detectSentiment(params) {\n        try {\n            const detectSentimentCommand = new DetectSentimentCommand(params);\n            const data = await this.comprehendClient.send(detectSentimentCommand);\n            const { Sentiment: predominant = '', SentimentScore: { Positive: positive = 0, Negative: negative = 0, Neutral: neutral = 0, Mixed: mixed = 0, } = {}, } = data ?? {};\n            return { predominant, positive, negative, neutral, mixed };\n        }\n        catch (err) {\n            if (err.code === 'AccessDeniedException') {\n                throw new Error('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n                    'amplify predictions add');\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async detectEntities(params) {\n        try {\n            const detectEntitiesCommand = new DetectEntitiesCommand(params);\n            const data = await this.comprehendClient.send(detectEntitiesCommand);\n            const { Entities = [] } = data || {};\n            return this.serializeEntitiesFromComprehend(Entities);\n        }\n        catch (err) {\n            if (err.code === 'AccessDeniedException') {\n                throw new Error('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n                    'amplify predictions add');\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    serializeEntitiesFromComprehend(data) {\n        let response = [];\n        if (data && Array.isArray(data)) {\n            response = data.map(({ Type: type, Text: text }) => {\n                return { type, text };\n            });\n        }\n        return response;\n    }\n    async detectLanguage(params) {\n        try {\n            const detectDominantLanguageCommand = new DetectDominantLanguageCommand(params);\n            const data = await this.comprehendClient.send(detectDominantLanguageCommand);\n            const { Languages: [{ LanguageCode }] = [{ LanguageCode: undefined }] } = data ?? {};\n            assertValidationError(!!LanguageCode, PredictionsValidationErrorCode.NoLanguage);\n            return LanguageCode;\n        }\n        catch (err) {\n            if (err.code === 'AccessDeniedException') {\n                throw new Error('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n                    'amplify predictions add');\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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"}