{"version":3,"file":"AmazonAIConvertPredictionsProvider.js","sources":["../../../src/providers/AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AmazonAIConvertPredictionsProvider = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst buffer_1 = require(\"buffer\");\nconst core_1 = require(\"@aws-amplify/core\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst client_polly_1 = require(\"@aws-sdk/client-polly\");\nconst client_translate_1 = require(\"@aws-sdk/client-translate\");\nconst eventstream_codec_1 = require(\"@smithy/eventstream-codec\");\nconst util_utf8_1 = require(\"@smithy/util-utf8\");\nconst validation_1 = require(\"../errors/types/validation\");\nconst assertValidationError_1 = require(\"../errors/utils/assertValidationError\");\nconst types_1 = require(\"../types\");\nconst logger = new core_1.ConsoleLogger('AmazonAIConvertPredictionsProvider');\nconst eventBuilder = new eventstream_codec_1.EventStreamCodec(util_utf8_1.toUtf8, util_utf8_1.fromUtf8);\nconst LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\nclass AmazonAIConvertPredictionsProvider {\n    constructor() {\n        this.inputSampleRate = 44100;\n    }\n    getProviderName() {\n        return 'AmazonAIConvertPredictionsProvider';\n    }\n    convert(input) {\n        (0, assertValidationError_1.assertValidationError)((0, types_1.isValidConvertInput)(input), validation_1.PredictionsValidationErrorCode.InvalidInput);\n        if ((0, types_1.isTranslateTextInput)(input)) {\n            logger.debug('translateText');\n            return this.translateText(input);\n        }\n        else if ((0, types_1.isTextToSpeechInput)(input)) {\n            logger.debug('textToSpeech');\n            return this.convertTextToSpeech(input);\n        }\n        else {\n            logger.debug('textToSpeech');\n            return this.convertSpeechToText(input);\n        }\n    }\n    async translateText(input) {\n        logger.debug('Starting translation');\n        const { translateText = {} } = core_1.Amplify.getConfig().Predictions?.convert ?? {};\n        (0, assertValidationError_1.assertValidationError)(!!translateText.region, validation_1.PredictionsValidationErrorCode.NoRegion);\n        const { defaults = {}, region } = translateText;\n        const { credentials } = await (0, core_1.fetchAuthSession)();\n        (0, assertValidationError_1.assertValidationError)(!!credentials, validation_1.PredictionsValidationErrorCode.NoCredentials);\n        const { sourceLanguage, targetLanguage } = defaults;\n        const sourceLanguageCode = input.translateText?.source?.language ?? sourceLanguage;\n        const targetLanguageCode = input.translateText?.targetLanguage ?? targetLanguage;\n        (0, assertValidationError_1.assertValidationError)(!!sourceLanguageCode, validation_1.PredictionsValidationErrorCode.NoSourceLanguage);\n        (0, assertValidationError_1.assertValidationError)(!!targetLanguageCode, validation_1.PredictionsValidationErrorCode.NoTargetLanguage);\n        this.translateClient = new client_translate_1.TranslateClient({\n            region,\n            credentials,\n            customUserAgent: (0, utils_1.getAmplifyUserAgentObject)({\n                category: utils_1.Category.Predictions,\n                action: utils_1.PredictionsAction.Convert,\n            }),\n        });\n        const translateTextCommand = new client_translate_1.TranslateTextCommand({\n            SourceLanguageCode: sourceLanguageCode,\n            TargetLanguageCode: targetLanguageCode,\n            Text: input.translateText?.source?.text,\n        });\n        const data = await this.translateClient.send(translateTextCommand);\n        return {\n            text: data.TranslatedText,\n            language: data.TargetLanguageCode,\n        };\n    }\n    async convertTextToSpeech(input) {\n        const { credentials } = await (0, core_1.fetchAuthSession)();\n        (0, assertValidationError_1.assertValidationError)(!!credentials, validation_1.PredictionsValidationErrorCode.NoCredentials);\n        (0, assertValidationError_1.assertValidationError)(!!input.textToSpeech?.source, validation_1.PredictionsValidationErrorCode.NoSource);\n        const { speechGenerator } = core_1.Amplify.getConfig().Predictions?.convert ?? {};\n        (0, assertValidationError_1.assertValidationError)(!!speechGenerator?.region, validation_1.PredictionsValidationErrorCode.NoRegion);\n        const { defaults = {}, region } = speechGenerator;\n        const { voiceId: defaultVoiceId } = defaults;\n        const voiceId = input.textToSpeech?.voiceId ?? defaultVoiceId;\n        (0, assertValidationError_1.assertValidationError)(!!voiceId, validation_1.PredictionsValidationErrorCode.NoVoiceId);\n        this.pollyClient = new client_polly_1.PollyClient({\n            region,\n            credentials,\n            customUserAgent: (0, utils_1.getAmplifyUserAgentObject)({\n                category: utils_1.Category.Predictions,\n                action: utils_1.PredictionsAction.Convert,\n            }),\n        });\n        const synthesizeSpeechCommand = new client_polly_1.SynthesizeSpeechCommand({\n            OutputFormat: 'mp3',\n            Text: input.textToSpeech?.source?.text,\n            VoiceId: voiceId,\n            TextType: 'text',\n            SampleRate: '24000',\n        });\n        const data = await this.pollyClient.send(synthesizeSpeechCommand);\n        const response = new Response(data.AudioStream);\n        const arrayBuffer = await response.arrayBuffer();\n        const blob = new Blob([arrayBuffer], {\n            type: data.ContentType,\n        });\n        const url = URL.createObjectURL(blob);\n        return {\n            speech: { url },\n            audioStream: arrayBuffer,\n            text: input.textToSpeech?.source?.text,\n        };\n    }\n    async convertSpeechToText(input) {\n        logger.debug('starting transcription..');\n        const { credentials } = await (0, core_1.fetchAuthSession)();\n        (0, assertValidationError_1.assertValidationError)(!!credentials, validation_1.PredictionsValidationErrorCode.NoCredentials);\n        const { transcription } = core_1.Amplify.getConfig().Predictions?.convert ?? {};\n        (0, assertValidationError_1.assertValidationError)(!!transcription?.region, validation_1.PredictionsValidationErrorCode.NoRegion);\n        const { defaults, region } = transcription;\n        const language = input.transcription?.language ?? defaults?.language;\n        (0, assertValidationError_1.assertValidationError)(!!language, validation_1.PredictionsValidationErrorCode.NoLanguage);\n        const source = input.transcription?.source;\n        (0, assertValidationError_1.assertValidationError)((0, types_1.isConvertBytesSource)(source), validation_1.PredictionsValidationErrorCode.InvalidSource);\n        const connection = await this.openConnectionWithTranscribe({\n            credentials,\n            region,\n            languageCode: language,\n        });\n        const fullText = await this.sendDataToTranscribe({\n            connection,\n            raw: source.bytes,\n            languageCode: language,\n        });\n        return {\n            transcription: {\n                fullText,\n            },\n        };\n    }\n    static serializeDataFromTranscribe(message) {\n        let decodedMessage = '';\n        const transcribeMessage = eventBuilder.decode(buffer_1.Buffer.from(message.data));\n        const transcribeMessageJson = JSON.parse((0, util_utf8_1.toUtf8)(transcribeMessage.body));\n        if (transcribeMessage.headers[':message-type'].value === 'exception') {\n            logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n            throw new Error(transcribeMessageJson.Message);\n        }\n        else if (transcribeMessage.headers[':message-type'].value === 'event') {\n            if (transcribeMessageJson.Transcript.Results.length > 0) {\n                if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n                    if (transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                        .Transcript.length > 0) {\n                        if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n                            decodedMessage =\n                                transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                                    .Transcript + '\\n';\n                            logger.debug({ decodedMessage });\n                        }\n                        else {\n                            logger.debug({\n                                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0],\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return decodedMessage;\n    }\n    sendDataToTranscribe({ connection, raw, languageCode, }) {\n        return new Promise((resolve, reject) => {\n            let fullText = '';\n            connection.onmessage = message => {\n                try {\n                    const decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n                    if (decodedMessage) {\n                        fullText += decodedMessage + ' ';\n                    }\n                }\n                catch (err) {\n                    logger.debug(err);\n                    reject(err);\n                }\n            };\n            connection.onerror = errorEvent => {\n                logger.debug({ errorEvent });\n                reject(new Error('failed to transcribe, network error'));\n            };\n            connection.onclose = closeEvent => {\n                logger.debug({ closeEvent });\n                resolve(fullText.trim());\n            };\n            logger.debug({ raw });\n            if (Array.isArray(raw)) {\n                for (let i = 0; i < raw.length - 1023; i += 1024) {\n                    const data = raw.slice(i, i + 1024);\n                    this.sendEncodedDataToTranscribe(connection, data, languageCode);\n                }\n            }\n            else {\n                // If Buffer\n                this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n            }\n            // sending end frame\n            const endFrameEventMessage = this.getAudioEventMessage(buffer_1.Buffer.from([]));\n            const endFrameBinary = eventBuilder.encode(endFrameEventMessage);\n            connection.send(endFrameBinary);\n        });\n    }\n    sendEncodedDataToTranscribe(connection, data, languageCode) {\n        const downsampledBuffer = this.downsampleBuffer({\n            buffer: data,\n            outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n                ? 8000\n                : 16000,\n        });\n        const pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n        const audioEventMessage = this.getAudioEventMessage(buffer_1.Buffer.from(pcmEncodedBuffer));\n        const binary = eventBuilder.encode(audioEventMessage);\n        connection.send(binary);\n    }\n    getAudioEventMessage(buffer) {\n        const audioEventMessage = {\n            body: buffer,\n            headers: {\n                ':message-type': {\n                    type: 'string',\n                    value: 'event',\n                },\n                ':event-type': {\n                    type: 'string',\n                    value: 'AudioEvent',\n                },\n            },\n        };\n        return audioEventMessage;\n    }\n    pcmEncode(input) {\n        let offset = 0;\n        // ArrayBuffer cannot be processed using length property\n        if (input instanceof ArrayBuffer) {\n            return input;\n        }\n        const buffer = new ArrayBuffer(input.length * 2);\n        const view = new DataView(buffer);\n        for (let i = 0; i < input.length; i++, offset += 2) {\n            const s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    }\n    downsampleBuffer({ buffer, outputSampleRate = 16000, }) {\n        // Cannot process ArrayBuffer using length property\n        if (outputSampleRate === this.inputSampleRate ||\n            buffer instanceof ArrayBuffer) {\n            return buffer;\n        }\n        const sampleRateRatio = this.inputSampleRate / outputSampleRate;\n        const newLength = Math.round(buffer.length / sampleRateRatio);\n        const result = new Float32Array(newLength);\n        let offsetResult = 0;\n        let offsetBuffer = 0;\n        while (offsetResult < result.length) {\n            const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n            let accum = 0;\n            let count = 0;\n            for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n                accum += buffer[i];\n                count++;\n            }\n            result[offsetResult] = accum / count;\n            offsetResult++;\n            offsetBuffer = nextOffsetBuffer;\n        }\n        return result;\n    }\n    openConnectionWithTranscribe({ credentials, region, languageCode, }) {\n        return new Promise((resolve, _reject) => {\n            const signedUrl = this.generateTranscribeUrl({\n                credentials,\n                region,\n                languageCode,\n            });\n            logger.debug('connecting...');\n            const connection = new WebSocket(signedUrl);\n            connection.binaryType = 'arraybuffer';\n            connection.onopen = () => {\n                logger.debug('connected');\n                resolve(connection);\n            };\n        });\n    }\n    generateTranscribeUrl({ credentials: { accessKeyId, secretAccessKey, sessionToken }, region, languageCode, }) {\n        const credentials = {\n            access_key: accessKeyId,\n            secret_key: secretAccessKey,\n            session_token: sessionToken,\n        };\n        const url = [\n            `wss://transcribestreaming.${region}.amazonaws.com:8443`,\n            '/stream-transcription-websocket?',\n            `media-encoding=pcm&`,\n            `sample-rate=${LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000'}&`,\n            `language-code=${languageCode}`,\n        ].join('');\n        const signedUrl = utils_1.Signer.signUrl(url, credentials, { region, service: 'transcribe' }, 300);\n        return signedUrl;\n    }\n}\nexports.AmazonAIConvertPredictionsProvider = AmazonAIConvertPredictionsProvider;\n"],"names":[],"mappings":"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"}